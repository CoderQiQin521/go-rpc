// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: hello.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SomeServerClient is the client API for SomeServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SomeServerClient interface {
	SomeMethod(ctx context.Context, in *RequestParam, opts ...grpc.CallOption) (*ResponseData, error)
}

type someServerClient struct {
	cc grpc.ClientConnInterface
}

func NewSomeServerClient(cc grpc.ClientConnInterface) SomeServerClient {
	return &someServerClient{cc}
}

func (c *someServerClient) SomeMethod(ctx context.Context, in *RequestParam, opts ...grpc.CallOption) (*ResponseData, error) {
	out := new(ResponseData)
	err := c.cc.Invoke(ctx, "/protocol.SomeServer/SomeMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SomeServerServer is the server API for SomeServer service.
// All implementations must embed UnimplementedSomeServerServer
// for forward compatibility
type SomeServerServer interface {
	SomeMethod(context.Context, *RequestParam) (*ResponseData, error)
	mustEmbedUnimplementedSomeServerServer()
}

// UnimplementedSomeServerServer must be embedded to have forward compatible implementations.
type UnimplementedSomeServerServer struct {
}

func (UnimplementedSomeServerServer) SomeMethod(context.Context, *RequestParam) (*ResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SomeMethod not implemented")
}
func (UnimplementedSomeServerServer) mustEmbedUnimplementedSomeServerServer() {}

// UnsafeSomeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SomeServerServer will
// result in compilation errors.
type UnsafeSomeServerServer interface {
	mustEmbedUnimplementedSomeServerServer()
}

func RegisterSomeServerServer(s grpc.ServiceRegistrar, srv SomeServerServer) {
	s.RegisterService(&SomeServer_ServiceDesc, srv)
}

func _SomeServer_SomeMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SomeServerServer).SomeMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.SomeServer/SomeMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SomeServerServer).SomeMethod(ctx, req.(*RequestParam))
	}
	return interceptor(ctx, in, info, handler)
}

// SomeServer_ServiceDesc is the grpc.ServiceDesc for SomeServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SomeServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.SomeServer",
	HandlerType: (*SomeServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SomeMethod",
			Handler:    _SomeServer_SomeMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hello.proto",
}
